// Function to check max resource limits
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "ERROR: Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "ERROR: Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "ERROR: Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

// Default configuration parameters
params {
    // Input directory containing all raw reads
    reads_dir = "$baseDir/reads"
    read_pattern = "*_{1,2}*.{fq,fastq}.gz"  // Pattern mở rộng để tìm nhiều kiểu tên file hơn
    
    // Output directory - bắt buộc phải chỉ định
    outdir = null
    
    // Kraken2 database path - specify path to your existing Kraken2 database
    krakendb = "/mnt/khoanxb/kraken_db"
    
    // Processing parameters
    kraken_threads = 4      // Reduced from 8 to 4
    bracken_threads = 4     // Reduced from 8 to 4
    
    // Bracken parameters
    bracken_threshold = 10  // Ngưỡng phân loại cho Bracken (-t)
    bracken_length = 150    // Độ dài read cho Bracken (-r)
    bracken_level = ["P","C","O","F","G","S"]  // Danh sách các cấp độ phân loại
    
    // ARGs_OAP parameters
    run_args_oap = true     // Enable ARGs_OAP
    args_oap_threads = 4    // Number of threads for ARGs_OAP
    
    // Execution/runtime options
    max_memory = 128.GB
    max_cpus = 12
    max_time = 48.h

    // Container/conda config
    enable_conda = true     // Enable conda for ARGs_OAP
    enable_docker = true    // Enable Docker for other tools
    container_kraken2 = 'quay.io/biocontainers/kraken2:2.1.2--pl5321h9f5acd7_2'
    container_bracken = 'quay.io/biocontainers/bracken:2.7--py39hc16433a_0'
    container_krona = 'quay.io/biocontainers/krona:2.8--pl5262hdfd78af_2'
    container_args_oap = 'quay.io/biocontainers/args_oap:3.2.4--pyhdfd78af_0' 
}

// Executor configuration for running on a standard workstation
executor {
    name = 'local'
    cpus = params.max_cpus
    memory = params.max_memory
    queueSize = 3  // Limit number of concurrent tasks
}

// Process configuration
process {
    // Default process settings
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time = { check_max( 2.h * task.attempt, 'time' ) }
    
    // Container settings
    withLabel: kraken2 {
        container = params.container_kraken2
        conda = null
    }
    
    withLabel: bracken {
        container = params.container_bracken
        conda = null
    }
    
    withLabel: krona {
        container = params.container_krona
        conda = null
    }
    
    withLabel: args_oap {
        container = params.container_args_oap
        conda = null
    }
    
    // Process-specific settings
    withName:KRAKEN2 {
        cpus = { check_max( params.kraken_threads, 'cpus' ) }
        memory = { check_max( 32.GB * task.attempt, 'memory' ) }
        time = { check_max( 24.h * task.attempt, 'time' ) }
        label = 'kraken2'
        errorStrategy = 'retry'
        maxRetries = 2
    }
    
    withName:BRACKEN {
        cpus = { check_max( params.bracken_threads, 'cpus' ) }
        memory = { check_max( 16.GB * task.attempt, 'memory' ) }
        time = { check_max( 4.h * task.attempt, 'time' ) }
        label = 'bracken'
        errorStrategy = 'retry'
        maxRetries = 2
    }
    
    withName:ARGS_OAP {
        cpus = { check_max( params.args_oap_threads, 'cpus' ) }
        memory = { check_max( 16.GB * task.attempt, 'memory' ) }
        time = { check_max( 8.h * task.attempt, 'time' ) }
        label = 'args_oap'
        errorStrategy = 'retry'
        maxRetries = 2
        when = params.run_args_oap
    }
}

// Docker configuration
docker {
    enabled = params.enable_docker
    sudo = true
    runOptions = "-v $HOME:$HOME -v $PWD:$PWD -v /mnt/khoanxb/kraken_db:/mnt/khoanxb/kraken_db"
    temp = 'auto'
    fixOwnership = true
}

// Conda configuration
conda {
    enabled = false
    useMamba = false
    cacheDir = "$baseDir/conda"
}